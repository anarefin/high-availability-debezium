version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000 # Default value, was removed when adding cluster config

  kafka-1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-1
    hostname: kafka-1
    ports:
      # Expose port 9092 for access from the host
      - "9092:9092"
      # Port 29092 for internal cluster communication if needed, but 19092 is used below
      # - "29092:29092"
    depends_on:
      - zookeeper # Depends only on the single zookeeper node
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Points to the single zookeeper
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092 # Use localhost for host access
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 # Set appropriate replication factor
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100 # Small delay
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2 # Require at least 2 replicas for transactions
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3



  postgres:
    image: debezium/postgres:17-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c wal_level=logical

  connect-1:
    image: debezium/connect:2.5
    container_name: connect-1
    hostname: connect-1
    ports:
      - "8083:8083" # Expose REST API for the first connect instance
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094 # Point to all brokers
      GROUP_ID: debezium_connect_cluster
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      CONNECT_REST_ADVERTISED_HOST_NAME: connect-1 # Helps workers find each other via REST API
      CONNECT_REST_PORT: 8083
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3 # Replication factor matching broker count
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3 # Replication factor matching broker count
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3 # Replication factor matching broker count
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /kafka/connect


  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

# Network configuration might be needed if default bridge network causes issues
# networks:
#   default:
#     name: debezium_network 

# Adding volume for RabbitMQ data persistence
volumes:
  rabbitmq_data: 